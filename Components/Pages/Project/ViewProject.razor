@page "/project/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using XMLDocCrowdSourcer.Data
@inject ApplicationDbContext db
@rendermode InteractiveServer

@attribute [Authorize]

@if (project == null) {
    <p>Loading...</p>
} else {
    <div class="d-flex justify-content-between">
        <h3>@project.Name</h3>
        <span>
            <ImportXmlButton Project=project />
            <ExportXmlButton Project=project />
        </span>
    </div>

    <CascadingValue Value=project>
        <FluentTabs>
            <FluentTab Label="Edit Documentation" Id="tab-1">
                <TabEditMappings />
            </FluentTab>
            <AuthorizeView Policy="Project.Proposals.Approve" Resource="project">
                <FluentTab Label="Pending Proposals" Id="tab-2" DeferredLoading>
                    <TabApproveProposals />
                </FluentTab>
            </AuthorizeView>
            <AuthorizeView Policy="Project.Managers.Edit" Resource="project">
                <FluentTab Label="Manage Project" Id="tab-3">
                    <TabManageProject />
                </FluentTab>
            </AuthorizeView>
        </FluentTabs>
    </CascadingValue>
}

@code {
    [Parameter]
    public Guid Id { get; set; } = default!;

    private Project? project { get; set; }

    protected async override Task OnParametersSetAsync() {
        project = await db.Projects
            .Include(p => p.Groups)
            .Include(p => p.UserRoles)
            .ThenInclude(r => r.User)
            .SingleAsync(p => p.Id == Id);
    }
}
