@using XMLDocCrowdSourcer.Data
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext db

<CascadingValue Value="@project">
    <FluentSplitter Orientation="Orientation.Horizontal" Panel1MinSize="10%" Panel1Size="20%" Panel2MinSize="10%">
        <Panel1>
            <input type="text"
                    class="w-100"
                    @oninput="OnChangeSearch" />
            <div class="group-list-panel">
                <FluentTreeView OnSelectedChange=OnChooseMapping>
                    <MappingGroupList Groups="@project.Groups" Filter="ListFilter" />
                </FluentTreeView>
            </div>
        </Panel1>
        <Panel2>
            <div class="vh-85 overflow-scroll">
                <MappingDetails @bind-Mapping:get="SelectedMapping" />
            </div>
        </Panel2>
    </FluentSplitter>
</CascadingValue>

@code {
    [CascadingParameter]
    private Project project { get; set; } = null!;

    private Mapping? SelectedMapping { get; set; }

    private string SearchText { get; set; } = "";

    private bool IsFiltering => !string.IsNullOrEmpty(SearchText);

    private HashSet<MappingGroup> filteredGroups = new();

    // TODO seems to be re-rendering both panels (or at least doing all the db queries for the list)
    // Try to fix that
    private void OnChooseMapping(FluentTreeItem item) {
        SelectedMapping = (item.Data as MappingGroup)?.Mapping;
    }

    private bool ListFilter(MappingGroup group) {
        return !IsFiltering || filteredGroups.Contains(group);
    }

    private async Task FilterIncludeParents(MappingGroup group) {
        if (group.ParentMappingGroup is not { } parent) {
            return;
        }

        filteredGroups.Add(parent);
        await FilterIncludeParents(parent);
    }

    // TODO debounce
    // TODO consider doing this with a binding and @bind:after for the search
    private async Task OnChangeSearch(ChangeEventArgs e) {
        SearchText = e.Value?.ToString() ?? "";

        var projectId = project?.Id;
        var results = db.MappingGroups.Where(g => g.Project.Id == projectId
            && g.Mapping != null
            && g.Name.Contains(SearchText));

        filteredGroups.Clear();
        filteredGroups.UnionWith(results);
        foreach (var group in results) {
            await FilterIncludeParents(group);
        }
    }
}
